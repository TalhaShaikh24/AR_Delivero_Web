"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/checkout/page",{

/***/ "(app-pages-browser)/./services/auth-service.ts":
/*!**********************************!*\
  !*** ./services/auth-service.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthService: () => (/* binding */ AuthService)\n/* harmony export */ });\n/* harmony import */ var _lib_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/api */ \"(app-pages-browser)/./lib/api.ts\");\n\n/**\n * Service for authentication-related API calls\n */ const AuthService = {\n    /**\n   * Register a new user\n   */ register: async function(email, username) {\n        let password = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"123456\", loginType = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"email\";\n        try {\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_0__.api.post(\"api/v1/user/register\", {\n                email,\n                username,\n                password,\n                loginType\n            });\n            return response;\n        } catch (error) {\n            console.error(\"Failed to register user:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Login a user\n   */ login: async (email, password)=>{\n        try {\n            const data = await _lib_api__WEBPACK_IMPORTED_MODULE_0__.api.post('api/v1/user/user-login', {\n                email,\n                password\n            });\n            localStorage.setItem('user', JSON.stringify(data.data.user));\n            localStorage.setItem('token', data.data.token);\n            return {\n                message: 'Login successful',\n                data\n            };\n        } catch (error) {\n            var _error_data_error, _error_data, _error_data1;\n            // error is actually the object returned from fetchApi with { ok, status, data, message }\n            if (error.status === 400 && ((_error_data = error.data) === null || _error_data === void 0 ? void 0 : (_error_data_error = _error_data.error) === null || _error_data_error === void 0 ? void 0 : _error_data_error.type) === 'NUMBERVERIFY' && ((_error_data1 = error.data) === null || _error_data1 === void 0 ? void 0 : _error_data1.data)) {\n                const userData = error.data.data;\n                localStorage.setItem('user', JSON.stringify({\n                    _id: userData._id,\n                    username: userData.username || userData.email.split('@')[0],\n                    email: userData.email,\n                    role: userData.userType\n                }));\n                localStorage.setItem('token', \"temp_\".concat(userData._id));\n                return error.data;\n            }\n            // For other errors, throw or return a useful error message\n            throw new Error(error.message || 'Login failed');\n        }\n    },\n    /**\n   * Verify OTP - handles optional number verification\n   */ verifyOtp: async (email, otp)=>{\n        try {\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_0__.api.post(\"api/v1/user/otp-verify\", {\n                email,\n                otp\n            });\n            // Check if we have user data even with a 400 status\n            if (response.data && response.status) {\n                // Store user data in localStorage\n                const userData = {\n                    _id: response.data._id,\n                    username: response.data.username,\n                    email: response.data.email,\n                    role: response.data.userType\n                };\n                localStorage.setItem(\"user\", JSON.stringify(userData));\n                // For now, we'll use a temporary token since the API doesn't provide one\n                // You might want to get a proper token from the login endpoint\n                localStorage.setItem(\"token\", \"temp_\".concat(response.data._id));\n            }\n            return response;\n        } catch (error) {\n            var _error_response, _error_response_data_error, _error_response_data, _error_response1;\n            // Check if it's a 400 error with NUMBERVERIFY type (which is acceptable)\n            if (((_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status) === 400 && ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : (_error_response_data = _error_response1.data) === null || _error_response_data === void 0 ? void 0 : (_error_response_data_error = _error_response_data.error) === null || _error_response_data_error === void 0 ? void 0 : _error_response_data_error.type) === \"NUMBERVERIFY\") {\n                const responseData = error.response.data;\n                // If we have user data and the status is true, treat it as success\n                if (responseData.data && responseData.status) {\n                    const userData = {\n                        _id: responseData.data._id,\n                        username: responseData.data.username,\n                        email: responseData.data.email,\n                        role: responseData.data.userType\n                    };\n                    localStorage.setItem(\"user\", JSON.stringify(userData));\n                    localStorage.setItem(\"token\", \"temp_\".concat(responseData.data._id));\n                    return responseData;\n                }\n            }\n            console.error(\"Failed to verify OTP:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Resend OTP\n   */ resendOtp: async (email)=>{\n        try {\n            const response = await _lib_api__WEBPACK_IMPORTED_MODULE_0__.api.post(\"api/v1/user/resend-otp\", {\n                email\n            });\n            return response;\n        } catch (error) {\n            console.error(\"Failed to resend OTP:\", error);\n            throw error;\n        }\n    },\n    /**\n   * Check if user is logged in\n   */ isLoggedIn: ()=>{\n        if (false) {}\n        return !!localStorage.getItem(\"token\");\n    },\n    /**\n   * Get current user\n   */ getCurrentUser: ()=>{\n        if (false) {}\n        const userStr = localStorage.getItem(\"user\");\n        return userStr ? JSON.parse(userStr) : null;\n    },\n    /**\n   * Logout user\n   */ logout: ()=>{\n        if (false) {}\n        localStorage.removeItem(\"user\");\n        localStorage.removeItem(\"token\");\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/auth-service.ts\n"));

/***/ })

});